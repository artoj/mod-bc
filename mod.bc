/*
 * Copyright (c) 2013 Arto Jonsson <artoj@iki.fi>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

# print array 'a' with 'n' elements
# returns 'n'
define printa(a, n) {
	auto i

	print "{ "
	for (i = 0; i < n; i++) {
		print a[i]
		if (i < n - 1) print ", "
	}
	print " }\n"
	return (n)
}

# absolute value of 'x'
define abs(x) {
	if (x < 0) return (-x)
	return (x)
}

# greatest common divisor 'x' and 'y'
define gcd(x, y) {
	auto t

	if (scale != 0) print "warning: scale is non-zero\n"

	while (y) {
		t = x
		x = y
		y = t % y
	}
	return (abs(x))
}

# inverse of 'a' modulo 'm'
# returns -1 if no inverse is found
define inverse(a, m) {
	auto i

	# gcd must be 1
	if (gcd(a, m) != 1) return (-1)

	for (i = 1; i < m; i++) {
		if ((a * i % m) == 1) {
			return (i)
		}
	}
	return (-1)
}

# order of 'a' in multiplicative group 'm'
define ord(a, m) {
	auto i

	if (scale != 0) print "warning: scale is non-zero\n"

	for (i = 0; i < m; i++) {
		if (i > 0 && ((a ^ i % m) == 1)) break
	}
	return (i)
}

# numbers in multiplicative group 'm'
define mul(m) {
	auto a, i, j

	j = 0

	for (i = 1; i < m; i++) {
		if (gcd(i, m) == 1) {
			a[j] = i
			j += 1
		}
	}
	return (printa(a, j))
}

# generator 'g' in multiplicative group 'm'
define gen(g, m) {
	auto i, v, j

	if (scale != 0) print "warning: scale is non-zero\n"

	j = 0

	for (i = 0; i < m; i++) {
		v = g^i % m
		if (v == 1 && i > 0 ) break

		a[j] = v
		j += 1
	}
	return (printa(a, j))
}

# index of 'a' base 'b' in modulo 'm'
define index(a, b, m) {
	auto i, v

	if (scale != 0) print "warning: scale is non-zero\n"

	for (i = 0; i < m; i++) {
		v = b^i % m
		if (v == 1 && i > 0) return (-1)
		if (v == a) break
	}
	return (i)
}
